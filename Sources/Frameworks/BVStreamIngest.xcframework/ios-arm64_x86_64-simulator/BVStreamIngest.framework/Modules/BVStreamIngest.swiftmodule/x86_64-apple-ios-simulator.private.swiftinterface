// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BVStreamIngest
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
@_exported import BVStreamIngest
import Foundation
import HaishinKit
import Swift
import UIKit
import VideoToolbox
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum EffectType {
  case unknown
  case skinSmooth
  public static func == (a: BVStreamIngest.EffectType, b: BVStreamIngest.EffectType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class Effect {
  public var type: BVStreamIngest.EffectType {
    get
  }
  public var intensity: Swift.Int
  public init(intensity: Swift.Int = 0)
  @objc deinit
}
@_inheritsConvenienceInitializers public class SkinSmoothEffect : BVStreamIngest.Effect {
  override public var type: BVStreamIngest.EffectType {
    get
  }
  override public init(intensity: Swift.Int = super)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CameraPreviewView : UIKit.UIView {
  @objc deinit
  @_Concurrency.MainActor(unsafe) public func adjustRenderView(to size: CoreFoundation.CGSize? = nil)
}
public enum StreamIngestQualityLevel : Swift.String {
  case low
  case medium
  case high
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol StreamIngestQuality {
  var level: BVStreamIngest.StreamIngestQualityLevel { get }
  var videoSize: CoreFoundation.CGSize { get }
  var videoBitRate: Swift.Int { get }
  var audioBitRate: Swift.Int { get }
}
public struct StreamIngestQualityLow : BVStreamIngest.StreamIngestQuality {
  public var level: BVStreamIngest.StreamIngestQualityLevel {
    get
  }
  public var videoSize: CoreFoundation.CGSize {
    get
  }
  public var videoBitRate: Swift.Int {
    get
  }
  public var audioBitRate: Swift.Int {
    get
  }
  public init()
}
public struct StreamIngestQualityMedium : BVStreamIngest.StreamIngestQuality {
  public var level: BVStreamIngest.StreamIngestQualityLevel {
    get
  }
  public var videoSize: CoreFoundation.CGSize {
    get
  }
  public var videoBitRate: Swift.Int {
    get
  }
  public var audioBitRate: Swift.Int {
    get
  }
  public init()
}
public struct StreamIngestQualityHigh : BVStreamIngest.StreamIngestQuality {
  public var level: BVStreamIngest.StreamIngestQualityLevel {
    get
  }
  public var videoSize: CoreFoundation.CGSize {
    get
  }
  public var videoBitRate: Swift.Int {
    get
  }
  public var audioBitRate: Swift.Int {
    get
  }
  public init()
}
public enum EffectStreamIngestLoadStatus {
  case unknown
  case loading
  case ready
  case fail
  public static func == (a: BVStreamIngest.EffectStreamIngestLoadStatus, b: BVStreamIngest.EffectStreamIngestLoadStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol EffectStreamIngestDelegate : ObjectiveC.NSObjectProtocol {
  func effectStreamIngest(_ ingest: BVStreamIngest.EffectStreamIngest, didChange loadStatus: BVStreamIngest.EffectStreamIngestLoadStatus)
}
@objc public class EffectStreamIngest : ObjectiveC.NSObject {
  public var videoRawDataFrameSize: CoreFoundation.CGSize
  weak public var delegate: (any BVStreamIngest.EffectStreamIngestDelegate)?
  public var effects: [BVStreamIngest.Effect] {
    get
  }
  public init(streamIngest: BVStreamIngest.StreamIngest, videoRawDataFrameSize: CoreFoundation.CGSize = CGSize(width: 720, height: 1280))
  @objc deinit
  public func createCameraView(frame: CoreFoundation.CGRect, aspectRatio ratio: CoreFoundation.CGFloat) -> BVStreamIngest.CameraPreviewView?
  public func attachCamera(device: AVFoundation.AVCaptureDevice) throws
  public func attachAudio(device: AVFoundation.AVCaptureDevice) throws
  public func startRunning()
  public func stopRunning()
  public func detachCamera()
  public func detachAudio()
  public func getEffect(with type: BVStreamIngest.EffectType) -> BVStreamIngest.Effect?
  public func setEffects(_ effects: [BVStreamIngest.Effect])
}
public class StreamIngestAuthorizer {
  public init(debugMode: Swift.Bool = false)
  public func requestAuthentication(completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc deinit
}
public protocol StreamIngestDelegate : ObjectiveC.NSObjectProtocol {
  func streamIngestDidStartPublishing(_ streamIngest: BVStreamIngest.StreamIngest)
  func streamIngestDidStopPublishing(_ streamIngest: BVStreamIngest.StreamIngest)
  func streamIngestDidFailToPublish(_ streamIngest: BVStreamIngest.StreamIngest)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class StreamIngest : ObjectiveC.NSObject {
  #if compiler(>=5.3) && $AsyncAwait
  public static func create(with config: BVStreamIngest.StreamIngestConfig) async throws -> BVStreamIngest.StreamIngest?
  #endif
  final public var videoBitrate: Swift.Int {
    get
    set
  }
  final public var videoSize: CoreFoundation.CGSize {
    get
    set
  }
  final public var audioBitrate: Swift.Int {
    get
    set
  }
  final public var info: HaishinKit.RTMPStreamInfo? {
    get
  }
  final public var paused: Swift.Bool {
    get
    set
  }
  final public var currentFPS: Swift.UInt16 {
    get
  }
  weak final public var delegate: (any BVStreamIngest.StreamIngestDelegate)?
  final public var videoOrientation: UIKit.UIInterfaceOrientation {
    get
    set
  }
  @objc deinit
  @objc override final public func addObserver(_ observer: ObjectiveC.NSObject, forKeyPath keyPath: Swift.String, options: Foundation.NSKeyValueObservingOptions = [], context: Swift.UnsafeMutableRawPointer?)
  @objc override final public func removeObserver(_ observer: ObjectiveC.NSObject, forKeyPath keyPath: Swift.String)
  final public func attachCamera(_ device: AVFoundation.AVCaptureDevice?, channel: Swift.UInt8 = 0, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  final public func attachAudio(_ device: AVFoundation.AVCaptureDevice?, automaticallyConfiguresApplicationAudioSession: Swift.Bool = false, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  final public func append(sampleBuffer: CoreMedia.CMSampleBuffer)
  final public func startPublish(rtmpUrl: Swift.String, stream name: Swift.String)
  final public func stopPublish()
  final public func close()
  final public func requestAuthentication(completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class StreamRenderView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) final public func attachStream(_ stream: BVStreamIngest.StreamIngest?)
  @objc deinit
}
public class StreamIngestConfig {
  public var key: Swift.String
  public init(key: Swift.String)
  @objc deinit
}
extension BVStreamIngest.EffectType : Swift.Equatable {}
extension BVStreamIngest.EffectType : Swift.Hashable {}
extension BVStreamIngest.StreamIngestQualityLevel : Swift.Equatable {}
extension BVStreamIngest.StreamIngestQualityLevel : Swift.Hashable {}
extension BVStreamIngest.StreamIngestQualityLevel : Swift.RawRepresentable {}
extension BVStreamIngest.EffectStreamIngestLoadStatus : Swift.Equatable {}
extension BVStreamIngest.EffectStreamIngestLoadStatus : Swift.Hashable {}
